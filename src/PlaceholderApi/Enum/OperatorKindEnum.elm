-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module PlaceholderApi.Enum.OperatorKindEnum exposing (..)

import Json.Decode as Decode exposing (Decoder)


type OperatorKindEnum
    = Gte
    | Lte
    | Ne
    | Like


list : List OperatorKindEnum
list =
    [ Gte, Lte, Ne, Like ]


decoder : Decoder OperatorKindEnum
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "GTE" ->
                        Decode.succeed Gte

                    "LTE" ->
                        Decode.succeed Lte

                    "NE" ->
                        Decode.succeed Ne

                    "LIKE" ->
                        Decode.succeed Like

                    _ ->
                        Decode.fail ("Invalid OperatorKindEnum type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : OperatorKindEnum -> String
toString enum____ =
    case enum____ of
        Gte ->
            "GTE"

        Lte ->
            "LTE"

        Ne ->
            "NE"

        Like ->
            "LIKE"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe OperatorKindEnum
fromString enumString____ =
    case enumString____ of
        "GTE" ->
            Just Gte

        "LTE" ->
            Just Lte

        "NE" ->
            Just Ne

        "LIKE" ->
            Just Like

        _ ->
            Nothing
