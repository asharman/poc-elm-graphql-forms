-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module PlaceholderApi.Object.User exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode
import PlaceholderApi.InputObject
import PlaceholderApi.Interface
import PlaceholderApi.Object
import PlaceholderApi.Scalar
import PlaceholderApi.ScalarCodecs
import PlaceholderApi.Union


id : SelectionSet (Maybe PlaceholderApi.ScalarCodecs.Id) PlaceholderApi.Object.User
id =
    Object.selectionForField "(Maybe ScalarCodecs.Id)" "id" [] (PlaceholderApi.ScalarCodecs.codecs |> PlaceholderApi.Scalar.unwrapCodecs |> .codecId |> .decoder |> Decode.nullable)


name : SelectionSet (Maybe String) PlaceholderApi.Object.User
name =
    Object.selectionForField "(Maybe String)" "name" [] (Decode.string |> Decode.nullable)


username : SelectionSet (Maybe String) PlaceholderApi.Object.User
username =
    Object.selectionForField "(Maybe String)" "username" [] (Decode.string |> Decode.nullable)


email : SelectionSet (Maybe String) PlaceholderApi.Object.User
email =
    Object.selectionForField "(Maybe String)" "email" [] (Decode.string |> Decode.nullable)


address :
    SelectionSet decodesTo PlaceholderApi.Object.Address
    -> SelectionSet (Maybe decodesTo) PlaceholderApi.Object.User
address object____ =
    Object.selectionForCompositeField "address" [] object____ (Basics.identity >> Decode.nullable)


phone : SelectionSet (Maybe String) PlaceholderApi.Object.User
phone =
    Object.selectionForField "(Maybe String)" "phone" [] (Decode.string |> Decode.nullable)


website : SelectionSet (Maybe String) PlaceholderApi.Object.User
website =
    Object.selectionForField "(Maybe String)" "website" [] (Decode.string |> Decode.nullable)


company :
    SelectionSet decodesTo PlaceholderApi.Object.Company
    -> SelectionSet (Maybe decodesTo) PlaceholderApi.Object.User
company object____ =
    Object.selectionForCompositeField "company" [] object____ (Basics.identity >> Decode.nullable)


type alias PostsOptionalArguments =
    { options : OptionalArgument PlaceholderApi.InputObject.PageQueryOptions }


posts :
    (PostsOptionalArguments -> PostsOptionalArguments)
    -> SelectionSet decodesTo PlaceholderApi.Object.PostsPage
    -> SelectionSet (Maybe decodesTo) PlaceholderApi.Object.User
posts fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { options = Absent }

        optionalArgs____ =
            [ Argument.optional "options" filledInOptionals____.options PlaceholderApi.InputObject.encodePageQueryOptions ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "posts" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


type alias AlbumsOptionalArguments =
    { options : OptionalArgument PlaceholderApi.InputObject.PageQueryOptions }


albums :
    (AlbumsOptionalArguments -> AlbumsOptionalArguments)
    -> SelectionSet decodesTo PlaceholderApi.Object.AlbumsPage
    -> SelectionSet (Maybe decodesTo) PlaceholderApi.Object.User
albums fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { options = Absent }

        optionalArgs____ =
            [ Argument.optional "options" filledInOptionals____.options PlaceholderApi.InputObject.encodePageQueryOptions ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "albums" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


type alias TodosOptionalArguments =
    { options : OptionalArgument PlaceholderApi.InputObject.PageQueryOptions }


todos :
    (TodosOptionalArguments -> TodosOptionalArguments)
    -> SelectionSet decodesTo PlaceholderApi.Object.TodosPage
    -> SelectionSet (Maybe decodesTo) PlaceholderApi.Object.User
todos fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { options = Absent }

        optionalArgs____ =
            [ Argument.optional "options" filledInOptionals____.options PlaceholderApi.InputObject.encodePageQueryOptions ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "todos" optionalArgs____ object____ (Basics.identity >> Decode.nullable)
