-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module PlaceholderApi.Query exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)
import PlaceholderApi.InputObject
import PlaceholderApi.Interface
import PlaceholderApi.Object
import PlaceholderApi.Scalar
import PlaceholderApi.ScalarCodecs
import PlaceholderApi.Union


underscore_ : SelectionSet (Maybe Int) RootQuery
underscore_ =
    Object.selectionForField "(Maybe Int)" "_" [] (Decode.int |> Decode.nullable)


type alias AlbumsOptionalArguments =
    { options : OptionalArgument PlaceholderApi.InputObject.PageQueryOptions }


albums :
    (AlbumsOptionalArguments -> AlbumsOptionalArguments)
    -> SelectionSet decodesTo PlaceholderApi.Object.AlbumsPage
    -> SelectionSet (Maybe decodesTo) RootQuery
albums fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { options = Absent }

        optionalArgs____ =
            [ Argument.optional "options" filledInOptionals____.options PlaceholderApi.InputObject.encodePageQueryOptions ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "albums" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


type alias AlbumRequiredArguments =
    { id : PlaceholderApi.ScalarCodecs.Id }


album :
    AlbumRequiredArguments
    -> SelectionSet decodesTo PlaceholderApi.Object.Album
    -> SelectionSet (Maybe decodesTo) RootQuery
album requiredArgs____ object____ =
    Object.selectionForCompositeField "album" [ Argument.required "id" requiredArgs____.id (PlaceholderApi.ScalarCodecs.codecs |> PlaceholderApi.Scalar.unwrapEncoder .codecId) ] object____ (Basics.identity >> Decode.nullable)


type alias CommentsOptionalArguments =
    { options : OptionalArgument PlaceholderApi.InputObject.PageQueryOptions }


comments :
    (CommentsOptionalArguments -> CommentsOptionalArguments)
    -> SelectionSet decodesTo PlaceholderApi.Object.CommentsPage
    -> SelectionSet (Maybe decodesTo) RootQuery
comments fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { options = Absent }

        optionalArgs____ =
            [ Argument.optional "options" filledInOptionals____.options PlaceholderApi.InputObject.encodePageQueryOptions ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "comments" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


type alias CommentRequiredArguments =
    { id : PlaceholderApi.ScalarCodecs.Id }


comment :
    CommentRequiredArguments
    -> SelectionSet decodesTo PlaceholderApi.Object.Comment
    -> SelectionSet (Maybe decodesTo) RootQuery
comment requiredArgs____ object____ =
    Object.selectionForCompositeField "comment" [ Argument.required "id" requiredArgs____.id (PlaceholderApi.ScalarCodecs.codecs |> PlaceholderApi.Scalar.unwrapEncoder .codecId) ] object____ (Basics.identity >> Decode.nullable)


type alias PhotosOptionalArguments =
    { options : OptionalArgument PlaceholderApi.InputObject.PageQueryOptions }


photos :
    (PhotosOptionalArguments -> PhotosOptionalArguments)
    -> SelectionSet decodesTo PlaceholderApi.Object.PhotosPage
    -> SelectionSet (Maybe decodesTo) RootQuery
photos fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { options = Absent }

        optionalArgs____ =
            [ Argument.optional "options" filledInOptionals____.options PlaceholderApi.InputObject.encodePageQueryOptions ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "photos" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


type alias PhotoRequiredArguments =
    { id : PlaceholderApi.ScalarCodecs.Id }


photo :
    PhotoRequiredArguments
    -> SelectionSet decodesTo PlaceholderApi.Object.Photo
    -> SelectionSet (Maybe decodesTo) RootQuery
photo requiredArgs____ object____ =
    Object.selectionForCompositeField "photo" [ Argument.required "id" requiredArgs____.id (PlaceholderApi.ScalarCodecs.codecs |> PlaceholderApi.Scalar.unwrapEncoder .codecId) ] object____ (Basics.identity >> Decode.nullable)


type alias PostsOptionalArguments =
    { options : OptionalArgument PlaceholderApi.InputObject.PageQueryOptions }


posts :
    (PostsOptionalArguments -> PostsOptionalArguments)
    -> SelectionSet decodesTo PlaceholderApi.Object.PostsPage
    -> SelectionSet (Maybe decodesTo) RootQuery
posts fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { options = Absent }

        optionalArgs____ =
            [ Argument.optional "options" filledInOptionals____.options PlaceholderApi.InputObject.encodePageQueryOptions ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "posts" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


type alias PostRequiredArguments =
    { id : PlaceholderApi.ScalarCodecs.Id }


post :
    PostRequiredArguments
    -> SelectionSet decodesTo PlaceholderApi.Object.Post
    -> SelectionSet (Maybe decodesTo) RootQuery
post requiredArgs____ object____ =
    Object.selectionForCompositeField "post" [ Argument.required "id" requiredArgs____.id (PlaceholderApi.ScalarCodecs.codecs |> PlaceholderApi.Scalar.unwrapEncoder .codecId) ] object____ (Basics.identity >> Decode.nullable)


type alias TodosOptionalArguments =
    { options : OptionalArgument PlaceholderApi.InputObject.PageQueryOptions }


todos :
    (TodosOptionalArguments -> TodosOptionalArguments)
    -> SelectionSet decodesTo PlaceholderApi.Object.TodosPage
    -> SelectionSet (Maybe decodesTo) RootQuery
todos fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { options = Absent }

        optionalArgs____ =
            [ Argument.optional "options" filledInOptionals____.options PlaceholderApi.InputObject.encodePageQueryOptions ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "todos" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


type alias TodoRequiredArguments =
    { id : PlaceholderApi.ScalarCodecs.Id }


todo :
    TodoRequiredArguments
    -> SelectionSet decodesTo PlaceholderApi.Object.Todo
    -> SelectionSet (Maybe decodesTo) RootQuery
todo requiredArgs____ object____ =
    Object.selectionForCompositeField "todo" [ Argument.required "id" requiredArgs____.id (PlaceholderApi.ScalarCodecs.codecs |> PlaceholderApi.Scalar.unwrapEncoder .codecId) ] object____ (Basics.identity >> Decode.nullable)


type alias UsersOptionalArguments =
    { options : OptionalArgument PlaceholderApi.InputObject.PageQueryOptions }


users :
    (UsersOptionalArguments -> UsersOptionalArguments)
    -> SelectionSet decodesTo PlaceholderApi.Object.UsersPage
    -> SelectionSet (Maybe decodesTo) RootQuery
users fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { options = Absent }

        optionalArgs____ =
            [ Argument.optional "options" filledInOptionals____.options PlaceholderApi.InputObject.encodePageQueryOptions ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "users" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


type alias UserRequiredArguments =
    { id : PlaceholderApi.ScalarCodecs.Id }


user :
    UserRequiredArguments
    -> SelectionSet decodesTo PlaceholderApi.Object.User
    -> SelectionSet (Maybe decodesTo) RootQuery
user requiredArgs____ object____ =
    Object.selectionForCompositeField "user" [ Argument.required "id" requiredArgs____.id (PlaceholderApi.ScalarCodecs.codecs |> PlaceholderApi.Scalar.unwrapEncoder .codecId) ] object____ (Basics.identity >> Decode.nullable)
